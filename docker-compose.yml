version: "2.5"

services:
  # Elasticsearch setup service for generating certificates
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  # Elasticsearch main node
  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: ibuy-service-es01
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # Kibana service
  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: ibuy-service-kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://ibuy-service-es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # PostgreSQL service
  postgres:
    image: postgres:17-alpine
    container_name: ibuy-service-postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
    volumes:
      - /usr/local/docker-volumns/postgre:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis service
  redis:
    image: redis:7.2-alpine
    container_name: ibuy-service-redis
    ports:
      - "${REDIS_PORT}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass "${REDIS_PASSWORD}" --appendonly yes
    volumes:
      - /usr/local/docker-volumns/redis:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO service
  minio:
    image: minio/minio
    container_name: ibuy-service-minio
    ports:
      - "${MINIO_PORT}:9000"
      - "9090:9090"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9090" --address ":9000"
    volumes:
      - /usr/local/minio/data:/data
      - /usr/local/minio/config:/root/.minio
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:4.0
    container_name: ibuy-service-rabbitmq
    ports:
      - "${RMQ_PORT}:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RMQ_VIRTUAL_HOST}

    # 启用流式队列和webui和命令行管理工具
    command: >
      bash -c "
        rabbitmq-plugins enable rabbitmq_stream rabbitmq_stream_management &&
        rabbitmq-server
      "
    volumes:
      - /usr/local/docker-volumes/rabbitmq:/var/lib/rabbitmq
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS service
  nestjs:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ibuy-service-nestjs
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=ibuy-service-postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - REDIS_HOST=ibuy-service-redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MINIO_HOST=ibuy-service-minio
      - MINIO_PORT=${MINIO_PORT}
      - RMQ_HOST=ibuy-service-rabbitmq
      - RMQ_PORT=${RMQ_PORT}
      - RMQ_USERNAME=${RMQ_USERNAME}
      - RMQ_PASSWORD=${RMQ_PASSWORD}
      - ALIPAY_APP_ID=${ALIPAY_APP_ID}
      - ALIPAY_MERCHANT_PRIVATE_KEY=${ALIPAY_MERCHANT_PRIVATE_KEY}
      - ALIPAY_PUBLIC_KEY=${ALIPAY_PUBLIC_KEY}
      - ALIPAY_NOTIFY_URL=${ALIPAY_NOTIFY_URL}
      - ALIPAY_RETURN_URL=${ALIPAY_RETURN_URL}
      - ALIPAY_GATEWAY_URL=${ALIPAY_GATEWAY_URL}
      - ALIPAY_SIGN_TYPE=${ALIPAY_SIGN_TYPE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - ES_NODE=${ES_NODE}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    # 注意depends_on是服务名，而不是容器名
    depends_on:
#      - postgres
#      - redis
#      - minio
#      - rabbitmq
#      - es01
      rabbitmq:
        condition: service_healthy  # 确保在 rabbitmq 健康后启动
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      es01:
        condition: service_healthy
    restart: always

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  postgre:
    driver: local
  redis:
    driver: local
  minio:
    driver: local
  rabbitmq:
    driver: local
