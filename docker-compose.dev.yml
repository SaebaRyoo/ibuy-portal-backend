version: "2.5"

services:
  # Elasticsearch setup service for generating certificates
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs # Shared volume for certificates
    user: "0" # Run as root to set permissions
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"] # Check if the certificate was generated
      interval: 1s
      timeout: 5s
      retries: 120

  # Elasticsearch main node
  es01:
    depends_on:
      setup:
        condition: service_healthy # Wait for setup to complete before starting
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs # Share certificates with setup
      - esdata01:/usr/share/elasticsearch/data # Persistent storage for data
    ports:
      - ${ES_PORT}:9200 # Expose Elasticsearch API
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node # Single node setup
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true # Prevent memory swapping
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT} # Set memory limit for the container
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ] # Check if Elasticsearch is running and secured
      interval: 10s
      timeout: 10s
      retries: 120

  # Kibana service for visualization
  kibana:
    depends_on:
      es01:
        condition: service_healthy # Wait for Elasticsearch to be healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs # Share certificates with Elasticsearch
      - kibanadata:/usr/share/kibana/data # Persistent storage for Kibana data
    ports:
      - ${KIBANA_PORT}:5601 # Expose Kibana UI
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT} # Set memory limit for the container
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ] # Check if Kibana UI is up
      interval: 10s
      timeout: 10s
      retries: 120

  # PostgreSQL service
  postgres:
    image: postgres
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432" # Expose PostgreSQL port
    environment:
      - POSTGRES_USER=${POSTGRES_USER} # PostgreSQL admin user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} # Password for the admin user
      - POSTGRES_DB=${POSTGRES_DATABASE} # Default database to create
    volumes:
      - /usr/local/docker-volumns/postgre:/var/lib/postgresql/data # Persistent storage for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"] # Check if PostgreSQL is ready
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis service
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379" # Expose Redis port
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD} # Redis authentication password

      # 启动 Redis 并强制设置密码 REDIS_PASSWORD AOF 持久化模式。
    command: >
      redis-server --requirepass "${REDIS_PASSWORD}" --appendonly yes
    volumes:
      - /usr/local/docker-volumns/redis:/data # Persistent storage for Redis data
    restart: always # Automatically restart the container on failure
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"] # Check if Redis is ready
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO service
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "${MINIO_PORT}:9000" # Expose MinIO API port
      - "9090:9090" # Expose MinIO console port
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER} # Root user for MinIO
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD} # Root password for MinIO
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} # Access key for MinIO
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY} # Secret key for MinIO

    # Start MinIO with specified ports and paths
    command: >
      server /data --console-address ":9090" --address ":9000"
    volumes:
      - /usr/local/minio/data:/data # Persistent storage for MinIO data
      - /usr/local/minio/config:/root/.minio # Persistent storage for MinIO config
    restart: always # Automatically restart if the container stops
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ service
  rabbitmq:
    # 当我使用 alpine 或者 management 镜像时，rabbitmq的管理页面报错无法加载？
    image: rabbitmq:4.0
    container_name: ibuy-service-rabbitmq
    ports:
      - "5552:5552" # RabbitMQ Stream Plugin port
      - "15672:15672" # RabbitMQ Management Plugin port
      - "${RMQ_PORT}:5672" # RabbitMQ AMQP port
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_stream advertised_host localhost # Stream Plugin configuration
      - RABBITMQ_DEFAULT_USER=${RMQ_USERNAME} # Default username
      - RABBITMQ_DEFAULT_PASS=${RMQ_PASSWORD} # Default password
      - RABBITMQ_DEFAULT_VHOST=${RMQ_VIRTUAL_HOST} # Default virtual host
    # 启用流式队列和webui和命令行管理工具
    command: >
      bash -c "
        rabbitmq-plugins enable rabbitmq_stream rabbitmq_stream_management &&
        rabbitmq-server
      "
    volumes:
      - /usr/local/docker-volumes/rabbitmq:/var/lib/rabbitmq # Persistent storage for RabbitMQ data
    restart: always # Automatically restart the container on failure
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status > /dev/null 2>&1 || exit 1"] # Check RabbitMQ health
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  certs:
    driver: local # Shared volume for certificates
  esdata01:
    driver: local # Persistent storage for Elasticsearch
  kibanadata:
    driver: local # Persistent storage for Kibana
  postgre:
    driver: local # Persistent storage for PostgreSQL
  redis:
    driver: local # Persistent storage for Redis
  minio:
    driver: local # Persistent storage for Minio
  rabbitmq:
    driver: local

